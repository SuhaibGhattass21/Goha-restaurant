# FROM node:18-alpine AS builder

# # Install build dependencies
# RUN apk add --no-cache curl postgresql-client netcat-openbsd

# WORKDIR /app

# # Set NODE_ENV for development during build to ensure devDependencies are installed
# ENV NODE_ENV=development

# # Copy package files
# COPY package*.json ./

# # Install all dependencies (including devDependencies for building)
# RUN npm install --silent && \
#     echo "Installing additional type definitions..." && \
#     npm install --save-dev @types/express @types/cors @types/jsonwebtoken @types/swagger-ui-express --silent

# # Verify type definitions are installed
# RUN echo "NODE_ENV: $NODE_ENV" && \
#     echo "Checking installed @types packages:" && \
#     ls -la node_modules/@types/ | head -10 && \
#     echo "Checking if express types exist:" && \
#     ls -la node_modules/@types/express/ || echo "Express types not found" && \
#     echo "Checking if cors types exist:" && \
#     ls -la node_modules/@types/cors/ || echo "Cors types not found" && \
#     echo "Total packages in node_modules:" && \
#     ls node_modules | wc -l

# # Copy source code
# COPY . .

# # Build the application
# RUN echo "Starting TypeScript build..." && npm run build

# # Production stage
# FROM node:18-alpine AS production

# # Install runtime dependencies
# RUN apk add --no-cache curl postgresql-client netcat-openbsd

# WORKDIR /app

# # Copy package files
# COPY package*.json ./

# # Install only production dependencies
# RUN npm ci --omit=dev --silent && npm cache clean --force

# # Copy built application from builder stage
# COPY --from=builder /app/dist ./dist
# COPY --from=builder /app/start.sh ./start.sh
# COPY --from=builder /app/init-db.sql ./init-db.sql

# # Make startup script executable
# RUN chmod +x start.sh

# # Create non-root user for security
# RUN addgroup -g 1001 -S nodejs && \
#     adduser -S nodeuser -u 1001 -G nodejs

# # Change ownership of the app directory to the nodeuser
# RUN chown -R nodeuser:nodejs /app

# USER nodeuser

# EXPOSE 3000

# # Health check
# HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
#   CMD curl -f http://localhost:3000/health || exit 1

# # Start the application using our startup script
# CMD ["sh", "start.sh"]
