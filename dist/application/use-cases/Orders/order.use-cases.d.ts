import type { IOrderRepository } from "@domain/repositories/Orders/order.repository.interface";
import type { IOrderItemRepository } from "@domain/repositories/Orders/order-item.repository.interface";
import type { IOrderItemExtraRepository } from "@domain/repositories/Orders/order-item-extra.repository.interface";
import type { Order } from "../../../infrastructure/database/models/Order.model";
import type { CreateOrderDto, OrderResponseDto, OrderListResponseDto, UpdateOrderDto, OrderSummaryDto, OrderStatsDto, FilterOrdersByShiftTypeAndDateDto } from "../../../application/dtos/Orders/order.dto";
import { OrderStatus, type OrderType } from "../../../domain/enums/Order.enums";
import type { CancelledOrderUseCases } from "./cancelled-order.use-cases";
export declare class OrderUseCases {
    private orderRepository;
    private orderItemRepository;
    private orderItemExtraRepository;
    private cancelledOrderUseCases;
    constructor(orderRepository: IOrderRepository, orderItemRepository: IOrderItemRepository, orderItemExtraRepository: IOrderItemExtraRepository, cancelledOrderUseCases: CancelledOrderUseCases);
    createOrder(orderData: CreateOrderDto): Promise<OrderResponseDto>;
    getOrderById(id: string): Promise<OrderResponseDto | null>;
    getOrdersByShiftId(shiftId: string): Promise<OrderSummaryDto[]>;
    getOrdersByCashierId(cashierId: string, page?: number, limit?: number): Promise<OrderListResponseDto>;
    getOrdersByStatus(status: OrderStatus, page?: number, limit?: number): Promise<OrderListResponseDto>;
    getOrdersByType(orderType: OrderType, page?: number, limit?: number): Promise<OrderListResponseDto>;
    getOrdersByDateRange(startDate: Date, endDate: Date, page?: number, limit?: number): Promise<OrderListResponseDto>;
    getOrdersByShiftTypeAndDate(dto: FilterOrdersByShiftTypeAndDateDto): Promise<Order[]>;
    getAllOrders(page?: number, limit?: number): Promise<OrderListResponseDto>;
    updateOrder(id: string, orderData: UpdateOrderDto): Promise<OrderResponseDto | null>;
    updateOrderStatus(id: string, status: OrderStatus): Promise<OrderResponseDto | null>;
    deleteOrder(id: string): Promise<boolean>;
    getOrderStats(shiftId?: string, startDate?: Date, endDate?: Date): Promise<OrderStatsDto>;
    recalculateOrderTotal(orderId: string): Promise<number>;
    private mapToResponseDto;
    private mapToSummaryDto;
    private mapItemToResponseDto;
}
